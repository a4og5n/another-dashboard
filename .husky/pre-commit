#!/usr/bin/env sh

# ========================================
# Git Branch Protection & Naming Enforcement
# ========================================

echo "üîí Checking git branch rules..."

# Get current branch name
branch="$(git rev-parse --abbrev-ref HEAD)"

# RULE 1: Block commits to protected branches (main/master)
if [ "$branch" = "main" ] || [ "$branch" = "master" ]; then
  echo ""
  echo "‚ùå BLOCKED: Cannot commit directly to '$branch' branch"
  echo ""
  echo "üìã Required workflow:"
  echo "  1. Create GitHub issue first: gh issue create --title \"...\""
  echo "  2. Create branch with appropriate prefix:"
  echo "     - feature/description-issue-123 (for new features)"
  echo "     - fix/description-issue-456 (for bug fixes)"
  echo "     - docs/description-issue-789 (for documentation)"
  echo "  3. Make your changes and commit on the branch"
  echo "  4. Push and create PR: gh pr create"
  echo ""
  echo "See CLAUDE.md Git Workflow Best Practices for details"
  echo ""
  exit 1
fi

# RULE 2: Enforce issue number in branch name
if ! echo "$branch" | grep -qE '^feature/.+-issue-[0-9]+$|^fix/.+-issue-[0-9]+$|^docs/.+-issue-[0-9]+$'; then
  echo ""
  echo "‚ùå BLOCKED: Branch name must include issue number"
  echo ""
  echo "Expected format:"
  echo "  feature/description-issue-123"
  echo "  fix/description-issue-456"
  echo "  docs/description-issue-789"
  echo ""
  echo "Current branch: $branch"
  echo ""
  echo "To fix:"
  echo "  1. Create GitHub issue if you haven't: gh issue create"
  echo "  2. Rename branch using appropriate prefix:"
  echo "     - feature/description-issue-123 (for new features)"
  echo "     - fix/description-issue-456 (for bug fixes)"
  echo "     - docs/description-issue-789 (for documentation changes)"
  echo ""
  echo "See CLAUDE.md Phase 0 for workflow details"
  echo ""
  exit 1
fi

echo "‚úÖ Branch check passed: $branch"
echo ""

# ========================================
# Pre-commit Validation Suite
# ========================================

echo "üîç Running pre-commit validation..."
echo "‚ö° Quick validation (catches issues before formatting)..."
pnpm type-check || { echo "‚ùå Type errors found! Fix before committing."; exit 1; }
echo "üìù Formatting and linting staged files..."
pnpm lint-staged
echo "‚úÖ Verifying code formatting..."
pnpm format:check || { echo "‚ùå Format check failed! Run 'pnpm format' to fix."; exit 1; }
echo "üß™ Running full validation suite..."
pnpm check:no-secrets-logged && pnpm type-check && pnpm test && pnpm test:a11y
