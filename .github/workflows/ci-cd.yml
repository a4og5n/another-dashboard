name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10"

jobs:
  # Quality checks that run on every PR and push
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm type-check

      - name: Linting
        run: pnpm lint

      - name: Format checking
        run: pnpm format:check

      - name: Check CLAUDE.md size
        run: |
          SIZE=$(wc -c < CLAUDE.md | tr -d ' ')
          MAX_SIZE=40000

          if [ "$SIZE" -gt "$MAX_SIZE" ]; then
            echo "❌ CLAUDE.md is too large: $SIZE characters (limit: $MAX_SIZE)"
            echo ""
            echo "How to fix:"
            echo "  1. Extract verbose sections to docs/ files"
            echo "  2. Replace with condensed summary + link"
            echo "  3. See PR #332 for examples"
            exit 1
          fi

          echo "✅ CLAUDE.md size: $SIZE characters (under $MAX_SIZE limit)"

  # Test suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test --coverage

      - name: Run accessibility tests
        run: pnpm test:a11y

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          # Kinde Auth environment variables (required for build)
          KINDE_CLIENT_ID: ${{ secrets.KINDE_CLIENT_ID }}
          KINDE_CLIENT_SECRET: ${{ secrets.KINDE_CLIENT_SECRET }}
          KINDE_ISSUER_URL: ${{ secrets.KINDE_ISSUER_URL }}
          KINDE_SITE_URL: ${{ secrets.KINDE_SITE_URL }}
          KINDE_POST_LOGOUT_REDIRECT_URL: ${{ secrets.KINDE_POST_LOGOUT_REDIRECT_URL }}
          KINDE_POST_LOGIN_REDIRECT_URL: ${{ secrets.KINDE_POST_LOGIN_REDIRECT_URL }}
          # Database environment variables (mock values for build)
          DATABASE_URL: postgresql://mock:mock@localhost:5432/mock
          POSTGRES_URL: postgresql://mock:mock@localhost:5432/mock
          # Mailchimp OAuth environment variables (mock values for build)
          MAILCHIMP_CLIENT_ID: mock_client_id
          MAILCHIMP_CLIENT_SECRET: mock_client_secret
          MAILCHIMP_REDIRECT_URI: https://localhost:3000/api/auth/mailchimp/callback
          ENCRYPTION_KEY: heMXwU2RDQIqEvMT7DPa7W4qEpcF9v5ul+Bl/aPZhbs=

      - name: Check bundle size
        run: |
          echo "Build completed successfully"
          ls -la .next/

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Deployment (only on main branch)
  # deploy:
  #   name: Deploy to Vercel
  #   runs-on: ubuntu-latest
  #   needs: [quality, test, build, security]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Deploy to Vercel
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         vercel-args: "--prod"
  #         vercel-org-id: ${{ secrets.ORG_ID }}
  #         vercel-project-id: ${{ secrets.PROJECT_ID }}

  # Performance monitoring
  # lighthouse:
  #   name: Lighthouse Performance Audit
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Audit URLs using Lighthouse
  #       uses: treosh/lighthouse-ci-action@v11
  #       with:
  #         urls: |
  #           https://another-dashboard-3fwet5bri-alvaros-projects-b3e953f8.vercel.app
  #         budgetPath: ./lighthouse-budget.json
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true
